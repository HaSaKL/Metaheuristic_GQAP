/*These are the all data needed to solve GQAP or adjustable by the users.*/

#define BIG_NUMBER  100000000000.0    /*It should be adjusted according to the problem size and other situation.
                                  It should be far bigger than the value of any Fij.*/
#define ODD_NUMBER -1
#define PROCESS_NUM 16
#define LOCATION_NUM 7
#define BIG_IN_FEASIBLE 10000.0
#define EPSILON  0.0000000000001 

const char FILE_NAME[]="result_C16X7-E-G-1115.txt";

const double Unit_Transportation_Fee=5;

const float Installation_Cost[PROCESS_NUM][LOCATION_NUM]
={{20000,23000,75000,60000,35000,50000,65000},
{35000,131500,37000,19000,76000,46700,157500},
{65000,39500,59500,29870,45600,42000,120500},
{35000,37500,51500,30000,70000,59000,66000},
{29500,85000,34500,44500,50000,74000,145000},
{35000,57500,29500,65000,110000,53200,39500},
{115000,35000,37500,55000,47000,28900,89000},
{124500,59500,38500,12000,50000,55000,25700},
{125000,34500,13500,78900,23100,43600,62000},
{74500,39500,128500,35000,60000,69000,50000},
{50500,150000,59000,39000,73000,63400,127000},
{58000,25500,70000,34200,45000,147600,40900},
{15000,135000,37500,45000,120000,39000,52500},
{67500,39500,58500,92000,152000,49000,60000},
{84500,28500,32500,65000,150000,139000,35000},
{123900,88500,55000,60500,59500,82900,38600},
		 };


const float Flow[PROCESS_NUM][PROCESS_NUM]
               ={{0,  0, 20,  0,  0,  0, 80,  0,  0, 90,   0, 180, 80, 0, 100,  0},            /*row i means ith process, column j means jth process*/
                 {0,  0,  0, 50,  0, 40, 58,  0,  0,  0, 100,   0,  0,100,  0,100},            /*Flow[i][j] means the flow from ith process to jth process*/
      	         {60, 0,  0, 30,  0, 75,  0,150, 60,  0,   0,  50,  0, 50,  0, 50},
                 {0,  0, 60,  0, 50, 60,  0,  0,  0,  0,  55,   0,  0, 50, 80,  0},
                 {0,  0, 70,  0,  0,100, 50, 58,  0,  0,   0,  65,  0, 50,  0, 50},
                 {0,  0, 60, 30,  0,  0, 50,125,  0, 60,  40,   0, 40,  0,  0,  0},
                 {50, 0, 80,  0,  0, 30,  0, 25, 30,  0,   0,   0, 40,  0,  0, 40},
                 {0,  0,110,  0, 90,  0, 50,  0, 45, 60,   0,  50,  0,150,100,  0},
                 {0,150,  0,110,  0,  0,  0, 75,  0, 70,   0,   0,  0, 50,  0,  0},
                 {0,  0, 40,  0, 60,120, 50,  0,195,  0,   0, 100,  0,  0,  0, 50},
                 {60, 0,  0,  0,  0,  0,  0, 65, 70,  0,   0,  80,  0,  0,  0,  0},
                 {70, 0, 60,  0,  0,  0,250,  0,  0,  0,  65,   0,  0, 50,  0,  0},
                 {0,100, 30,  0,110,  0,  0,150,  0, 50,   0,   0,  0,  0,  0, 80},
                 {0,  0,100,  0,  0,  0,100, 75,  0, 70,   0,   0, 40,  0,100,  0},
                 {100,0,  0, 80,  0,  0,  0,100,  0,  0,   0,   0,  0,100,  0,  0},
				 {0,100, 50,  0, 50,  0, 40,  0,  0, 50,   0,   0, 80,  0,  0,  0},
		};

const float Distance[LOCATION_NUM][LOCATION_NUM]
                   ={{0,100,150,100,50,80,90},         /*row i means ith location, column j means jth location*/
                     {100,0,80,60,50,100,70},          /*Distance[i][j] means the distance from ith location to jth location*/
	             {150,80,0,70,120,70,100},
	             {100,60,70,0,60,100,80},
	             {50,50,120,60,0,80,100},
                 {80,100,70,100,80,0,70},
                 {90,70,100,80,100,70,0},
                 };

const float Space_Need[PROCESS_NUM]={70,145,125,65,120,85,40,75,60,40,105,50,60,85,50,130};

float Space_Avail[LOCATION_NUM]={120,270,400,180,90,115,160};

int  CurrentBestSolution[PROCESS_NUM][2]={{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1}};      /*initialize each element to ODD_NUMBER*/
int  CurrentSolution[PROCESS_NUM][2]={{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1}};

int Unassigned_Process[PROCESS_NUM]={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};   /*for each process*/

   